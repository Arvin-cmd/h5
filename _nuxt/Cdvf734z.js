const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["./Cpq4pGxo.js","./DE9oX6xH.js","./du6FXzWk.js","./entry.D04ESnWj.css","./s7WYq-nx.js","./SeJPgxFg.js","./CvOAY9AH.js"])))=>i.map(i=>d[i]);
import{br as x,bs as g,bt as _,bu as A,bv as U,bw as b,bx as k}from"./du6FXzWk.js";import{by as K}from"./du6FXzWk.js";D.type="coinbaseWallet";function D(u={}){return u.version==="3"||u.headlessMode?C(u):L(u)}function L(u){let y,f,w,r;return x(a=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:D.type,async connect({chainId:t,withCapabilities:c,...n}={}){try{const e=await this.getProvider(),i=(await e.request({method:"eth_requestAccounts",params:"instantOnboarding"in n&&n.instantOnboarding?[{onboarding:"instant"}]:[]})).map(s=>g(s));f||(f=this.onAccountsChanged.bind(this),e.on("accountsChanged",f)),w||(w=this.onChainChanged.bind(this),e.on("chainChanged",w)),r||(r=this.onDisconnect.bind(this),e.on("disconnect",r));let o=await this.getChainId();if(t&&o!==t){const s=await this.switchChain({chainId:t}).catch(l=>{if(l.code===b.code)throw l;return{id:o}});o=(s==null?void 0:s.id)??o}return{accounts:c?i.map(s=>({address:s,capabilities:{}})):i,chainId:o}}catch(e){throw/(user closed modal|accounts received is empty|user denied account|request rejected)/i.test(e.message)?new b(e):e}},async disconnect(){var c;const t=await this.getProvider();f&&(t.removeListener("accountsChanged",f),f=void 0),w&&(t.removeListener("chainChanged",w),w=void 0),r&&(t.removeListener("disconnect",r),r=void 0),t.disconnect(),(c=t.close)==null||c.call(t)},async getAccounts(){return(await(await this.getProvider()).request({method:"eth_accounts"})).map(c=>g(c))},async getChainId(){const c=await(await this.getProvider()).request({method:"eth_chainId"});return Number(c)},async getProvider(){if(!y){const t=(()=>{var e;return typeof u.preference=="string"?{options:u.preference}:{...u.preference,options:((e=u.preference)==null?void 0:e.options)??"all"}})(),{createCoinbaseWalletSDK:c}=await k(async()=>{const{createCoinbaseWalletSDK:e}=await import("./Cpq4pGxo.js");return{createCoinbaseWalletSDK:e}},__vite__mapDeps([0,1,2,3,4,5]),import.meta.url);y=c({...u,appChainIds:a.chains.map(e=>e.id),preference:t}).getProvider()}return y},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:t,chainId:c}){var i,o,s,l;const n=a.chains.find(d=>d.id===c);if(!n)throw new _(new A);const e=await this.getProvider();try{return await e.request({method:"wallet_switchEthereumChain",params:[{chainId:U(n.id)}]}),n}catch(d){if(d.code===4902)try{let p;t!=null&&t.blockExplorerUrls?p=t.blockExplorerUrls:p=(i=n.blockExplorers)!=null&&i.default.url?[(o=n.blockExplorers)==null?void 0:o.default.url]:[];let h;(s=t==null?void 0:t.rpcUrls)!=null&&s.length?h=t.rpcUrls:h=[((l=n.rpcUrls.default)==null?void 0:l.http[0])??""];const v={blockExplorerUrls:p,chainId:U(c),chainName:(t==null?void 0:t.chainName)??n.name,iconUrls:t==null?void 0:t.iconUrls,nativeCurrency:(t==null?void 0:t.nativeCurrency)??n.nativeCurrency,rpcUrls:h};return await e.request({method:"wallet_addEthereumChain",params:[v]}),n}catch(p){throw new b(p)}throw new _(d)}},onAccountsChanged(t){t.length===0?this.onDisconnect():a.emitter.emit("change",{accounts:t.map(c=>g(c))})},onChainChanged(t){const c=Number(t);a.emitter.emit("change",{chainId:c})},async onDisconnect(t){a.emitter.emit("disconnect");const c=await this.getProvider();f&&(c.removeListener("accountsChanged",f),f=void 0),w&&(c.removeListener("chainChanged",w),w=void 0),r&&(c.removeListener("disconnect",r),r=void 0)}}))}function C(u){let f,w,r,a,t;return x(c=>({id:"coinbaseWalletSDK",name:"Coinbase Wallet",rdns:"com.coinbase.wallet",type:D.type,async connect({chainId:n,withCapabilities:e}={}){try{const i=await this.getProvider(),o=(await i.request({method:"eth_requestAccounts"})).map(l=>g(l));r||(r=this.onAccountsChanged.bind(this),i.on("accountsChanged",r)),a||(a=this.onChainChanged.bind(this),i.on("chainChanged",a)),t||(t=this.onDisconnect.bind(this),i.on("disconnect",t));let s=await this.getChainId();if(n&&s!==n){const l=await this.switchChain({chainId:n}).catch(d=>{if(d.code===b.code)throw d;return{id:s}});s=(l==null?void 0:l.id)??s}return{accounts:e?o.map(l=>({address:l,capabilities:{}})):o,chainId:s}}catch(i){throw/(user closed modal|accounts received is empty|user denied account)/i.test(i.message)?new b(i):i}},async disconnect(){const n=await this.getProvider();r&&(n.removeListener("accountsChanged",r),r=void 0),a&&(n.removeListener("chainChanged",a),a=void 0),t&&(n.removeListener("disconnect",t),t=void 0),n.disconnect(),n.close()},async getAccounts(){return(await(await this.getProvider()).request({method:"eth_accounts"})).map(e=>g(e))},async getChainId(){const e=await(await this.getProvider()).request({method:"eth_chainId"});return Number(e)},async getProvider(){var n;if(!w){const e=await(async()=>{const{default:d}=await k(async()=>{const{default:p}=await import("./CvOAY9AH.js").then(h=>h.i);return{default:p}},__vite__mapDeps([6,2,3,1]),import.meta.url);return typeof d!="function"&&typeof d.default=="function"?d.default:d})();f=new e({...u,reloadOnDisconnect:!1});const i=(n=f.walletExtension)==null?void 0:n.getChainId(),o=c.chains.find(d=>u.chainId?d.id===u.chainId:d.id===i)||c.chains[0],s=u.chainId||(o==null?void 0:o.id),l=u.jsonRpcUrl||(o==null?void 0:o.rpcUrls.default.http[0]);w=f.makeWeb3Provider(l,s)}return w},async isAuthorized(){try{return!!(await this.getAccounts()).length}catch{return!1}},async switchChain({addEthereumChainParameter:n,chainId:e}){var s,l,d,p;const i=c.chains.find(h=>h.id===e);if(!i)throw new _(new A);const o=await this.getProvider();try{return await o.request({method:"wallet_switchEthereumChain",params:[{chainId:U(i.id)}]}),i}catch(h){if(h.code===4902)try{let v;n!=null&&n.blockExplorerUrls?v=n.blockExplorerUrls:v=(s=i.blockExplorers)!=null&&s.default.url?[(l=i.blockExplorers)==null?void 0:l.default.url]:[];let I;(d=n==null?void 0:n.rpcUrls)!=null&&d.length?I=n.rpcUrls:I=[((p=i.rpcUrls.default)==null?void 0:p.http[0])??""];const q={blockExplorerUrls:v,chainId:U(e),chainName:(n==null?void 0:n.chainName)??i.name,iconUrls:n==null?void 0:n.iconUrls,nativeCurrency:(n==null?void 0:n.nativeCurrency)??i.nativeCurrency,rpcUrls:I};return await o.request({method:"wallet_addEthereumChain",params:[q]}),i}catch(v){throw new b(v)}throw new _(h)}},onAccountsChanged(n){n.length===0?this.onDisconnect():c.emitter.emit("change",{accounts:n.map(e=>g(e))})},onChainChanged(n){const e=Number(n);c.emitter.emit("change",{chainId:e})},async onDisconnect(n){c.emitter.emit("disconnect");const e=await this.getProvider();r&&(e.removeListener("accountsChanged",r),r=void 0),a&&(e.removeListener("chainChanged",a),a=void 0),t&&(e.removeListener("disconnect",t),t=void 0)}}))}export{D as coinbaseWallet,K as injected};
